// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
#endif

#import <BridgSDK/BridgSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum PaymentStatus : NSInteger;
enum TransactionStatus : NSInteger;
@class BridgSDKCentral;
@protocol CustomerManagerDelegate;


/// CustomerManager object is used to provide functionalities of customer.
///
/// <code>CustomerManager
/// </code> is singleton class. Therefore, use <code>sharedInstance
/// </code> property to obtain instance of this class.
/// Before calling any methods, assure to call <code>setIdentity(_:)
/// </code> firstly to set customer's identity, e.g., customer's ID. Otherwise, an exception will be thrown.
SWIFT_CLASS("_TtC8BridgSDK15CustomerManager")
@interface CustomerManager : NSObject <BridgSDKCentralDelegate>

/// Delegate of CustomerManager, it must conform CustomerManagerDelegate.\See 
///
/// <code>CustomerManagerDelegate
/// </code>.
@property (nonatomic, weak) id <CustomerManagerDelegate> _Nullable delegate;

/// Shared instance of CustomerManager.
+ (CustomerManager * _Nonnull)sharedInstance;

/// Set customer's identity, e.g., customer's ID.
///
/// \param identity The customer's identity, e.g., customer's ID.
- (void)setIdentity:(NSString * _Nonnull)identity;

/// Make the customer discoverable from around merchants.
- (void)enableDiscoverable;

/// Make the customer undiscoverable from around merchants.\Note 
///
/// After completing a transaction, must call this method, then call <code>enableDiscoverable()
/// </code> again if need be.\See 
///
/// <code>enableDiscoverable()
/// </code>.
- (void)disableDiscoverable;

/// Reply received payment request.
///
/// \param reply The reply to received payment request.
- (void)replyPayment:(enum PaymentStatus)reply;

/// Update transaction status to merchant.\Note 
///
/// If the customer is in charge of making transaction, after marking one, call this method to notify merchant status of the transaction.\See 
///
/// <code>CustomerManagerDelegate.customer(_:readyToMakeTransaction:)
/// </code>.
///
/// \param transactionStatus The status of transaction.
- (void)updateTransactionStatus:(enum TransactionStatus)transactionStatus;
- (void)central:(BridgSDKCentral * _Null_unspecified)central readyToCommunicate:(BOOL)ready;
- (void)central:(BridgSDKCentral * _Null_unspecified)central didReceiveMessage:(NSString * _Null_unspecified)rawMessage onCharacteristic:(CharacteristicEnum)characteristicEnum;
- (void)central:(BridgSDKCentral * _Null_unspecified)central log:(NSString * _Null_unspecified)log;
@end



/// CustomerManagerDelegate protocol defines the methods that a delegate of a CustomerManager object must adopt. All methods of the protocol are required.
SWIFT_PROTOCOL("_TtP8BridgSDK23CustomerManagerDelegate_")
@protocol CustomerManagerDelegate

/// Invoked when the customer's device connected to merchant's device and they are ready to exchange data.\Note 
///
/// All methods of <code>CustomerManager
/// </code>, except <code>setIdentity(_:)
/// </code>, <code>enableDiscoverable()
/// </code> and <code>disableDiscoverable()
/// </code>, must be called after this method is invoked.
///
/// \param customer The customer manager providing this information.
///
/// \param ready The readiness to exchange data.
- (void)customer:(CustomerManager * _Nonnull)customer readyToCommunicate:(BOOL)ready;

/// Invoked when the customer receives the payment request from a merchant.
///
/// \param customer The customer manager providing this information.
///
/// \param amount The amount of payment.
///
/// \param merchantId The ID of merchant sending the payment request.
- (void)customer:(CustomerManager * _Nonnull)customer didReceivePaymentOf:(float)amount fromMerchant:(NSString * _Nonnull)merchantId;

/// Invoked when the customer is in charge of making transaction.\Note 
///
/// After making transaction, should call <code>updateTransactionStatus(_:)
/// </code> of <code>CustomerManager
/// </code> to notify merchant status of the transaction.
///
/// \param customer The customer manager providing this information.
///
/// \param ready The readiness to make transaction.
- (void)customer:(CustomerManager * _Nonnull)customer readyToMakeTransaction:(BOOL)ready;

/// Invoked when the customer receives transaction status from merchant.\Note 
///
/// This method is invoked only if merchant is in charge of making transaction. The customer uses this method to handle transaction completion.
///
/// \param customer The customer manager providing this information.
///
/// \param transactionStatus The transaction status.
- (void)customer:(CustomerManager * _Nonnull)customer didReceiveTransactionStatus:(enum TransactionStatus)transactionStatus;
@end

@class BridgSDKPeripheral;
@class Device;
@protocol MerchantManagerDelegate;


/// MerchantManager object is used to provide functionalities of merchant.
///
/// <code>MerchantManager
/// </code> is singleton class. Therefore, use <code>sharedInstance
/// </code> property to obtain instance of this class.
/// Before calling any methods, assure to call <code>setIdentity(_:)
/// </code> firstly to set customer's identity, e.g., customer's ID. Otherwise, an exception will be thrown.
SWIFT_CLASS("_TtC8BridgSDK15MerchantManager")
@interface MerchantManager : NSObject <BridgSDKPeripheralDelegate>

/// Delegate of MerchantManager, it must conform MerchantManagerDelegate.\See 
///
/// <code>MerchantManagerDelegate
/// </code>.
@property (nonatomic, weak) id <MerchantManagerDelegate> _Nullable delegate;

/// Shared instance of MerchantManager.
+ (MerchantManager * _Nonnull)sharedInstance;

/// Set merchant's identity, e.g., merchant's ID.
///
/// \param identity The merchant's identity, e.g., merchant's ID.
- (void)setIdentity:(NSString * _Nonnull)identity;

/// Start discovering around customers.
- (void)startDiscovering;

/// Stop discovering around customers.\Note 
///
/// After completing a transaction, must call this method, then call <code>startDiscovering()
/// </code> again if need be.\See 
///
/// <code>startDiscovering()
/// </code>.
- (void)stopDiscovering;

/// Connect to a customer by its identity.
///
/// \param identity The customer's identity.
- (void)connectDeviceWithIdentity:(NSString * _Nonnull)identity;

/// Request a payment to a customer by its identity.
///
/// \param amount The amount of payment.
///
/// \param customerIdentity The customer's identity.
- (void)makePaymentOf:(float)amount customerIdentity:(NSString * _Nonnull)customerIdentity;

/// Update transaction status to customer.\Note 
///
/// If the merchant is in charge of making transaction, after marking one, call this method to notify customer status of the transaction.\See 
///
/// <code>MerchantManagerDelegate.merchant(_:readyToMakeTransaction:)
/// </code>.
///
/// \param transactionStatus The status of transaction.
- (void)updateTransactionStatus:(enum TransactionStatus)transactionStatus;
- (void)peripheral:(BridgSDKPeripheral * _Null_unspecified)peripheral readyToCommunicate:(BOOL)ready;
- (void)peripheral:(BridgSDKPeripheral * _Null_unspecified)peripheral didUpdateDevices:(NSArray<Device *> * _Null_unspecified)devices;
- (void)peripheral:(BridgSDKPeripheral * _Null_unspecified)peripheral didReceiveMessage:(NSString * _Null_unspecified)rawMessage onCharacteristic:(CharacteristicEnum)characteristicEnum;
- (void)peripheral:(BridgSDKPeripheral * _Null_unspecified)peripheral log:(NSString * _Null_unspecified)log;
@end



/// MerchantManagerDelegate protocol defines the methods that a delegate of a MerchantManager object must adopt. All methods of the protocol are required.
SWIFT_PROTOCOL("_TtP8BridgSDK23MerchantManagerDelegate_")
@protocol MerchantManagerDelegate

/// Invoked when a customer's device connected to the merchant's device and they are ready to exchange data.\Note 
///
/// All methods of <code>MerchantManager
/// </code>, except <code>setIdentity(_:)
/// </code>, <code>startDiscovering()
/// </code> and <code>stopDiscovering()
/// </code>, must be called after this method is invoked.
///
/// \param merchant The merchant manager providing this information.
///
/// \param ready The readiness to exchange data.
- (void)merchant:(MerchantManager * _Nonnull)merchant readyToCommunicate:(BOOL)ready;

/// Invoked when the merchant has update on list of discovered devices.\See 
///
/// <code>Device
/// </code>.
///
/// \param merchant The merchant manager providing this information.
///
/// \param devices The list of discovered devices.
- (void)merchant:(MerchantManager * _Nonnull)merchant didUpdateDevices:(NSArray<Device *> * _Nonnull)devices;

/// Invoked when the merchant receives the reply to sent payment request.
///
/// \param merchant The merchant manager providing this information.
///
/// \param paymentStatus The reply to sent payment request.
- (void)merchant:(MerchantManager * _Nonnull)merchant didReceivePaymentStatus:(enum PaymentStatus)paymentStatus;

/// Invoked when the merchant is in charge of making transaction.\Note 
///
/// After making transaction, should call <code>updateTransactionStatus(_:)
/// </code> of <code>MerchantManager
/// </code> to notify customer status of the transaction.
///
/// \param merchant The merchant manager providing this information.
///
/// \param ready The readiness to make transaction.
- (void)merchant:(MerchantManager * _Nonnull)merchant readyToMakeTransaction:(BOOL)ready;

/// Invoked when the merchant receives transaction status from customer.\Note 
///
/// This method is invoked only if customer is in charge of making transaction. The merchant uses this method to handle transaction completion.
///
/// \param merchant The merchant manager providing this information.
///
/// \param transactionStatus The transaction status.
- (void)merchant:(MerchantManager * _Nonnull)merchant didReceiveTransactionStatus:(enum TransactionStatus)transactionStatus;
@end


/// PaymentStatus enum is used to reply to payment request.
///
/// <ul><li>Accepted:                                             Accept payment request.</li><li>Rejected:                                             Reject payment request.</li></ul>
typedef SWIFT_ENUM(NSInteger, PaymentStatus) {

/// Accept payment request.
  PaymentStatusAccepted = 0,

/// Reject payment request.
  PaymentStatusRejected = 1,
};


/// TransactionStatus is used to determine status of transaction.
///
/// <ul><li>Succeeded:                                     Succeeded transaction.</li><li>Failed:                                        Failed transaction.</li></ul>
typedef SWIFT_ENUM(NSInteger, TransactionStatus) {

/// Succeeded transaction.
  TransactionStatusSucceeded = 0,

/// Failed transaction.
  TransactionStatusFailed = 1,
};

#pragma clang diagnostic pop
